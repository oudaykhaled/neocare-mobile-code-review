{"ast":null,"code":"export const gitconflictsContent = `\n# üî¥ CRITICAL ISSUE #6: Git Merge Conflicts in Production Files\n\n**Severity:** üî¥ CRITICAL  \n**Score:** 0/10  \n**Status:** ‚úÖ FIXED (But indicates poor practices)\n\n---\n\n## Overview\n\nThe codebase had **unresolved Git merge conflicts** in production files, specifically in \\`AndroidManifest.xml\\`. This is a **critical issue** that indicates:\n- ‚ùå Poor version control practices\n- ‚ùå No code review process\n- ‚ùå No CI/CD checks\n- ‚ùå Code pushed without testing\n- ‚ùå Build failures\n\n---\n\n## Issues Found\n\n### 1. **Unresolved Merge Conflicts in AndroidManifest.xml**\n\n**Location:** \\`android/app/src/main/AndroidManifest.xml\\`\n\n**Found Conflicts:**\n\\`\\`\\`xml\n<<<<<<< HEAD\n  <uses-permission android:name=\"android.permission.health.READ_FLOORS_CLIMBED\"/>\n=======\n>>>>>>> cf971f6a5e39723265b900f8f9b09f5074bc4a11\n  <uses-permission android:name=\"android.permission.health.READ_HYDRATION\"/>\n\n<!-- ... later in file ... -->\n\n<<<<<<< HEAD\n=======\n      <intent-filter>\n        <action android:name=\"androidx.health.ACTION_SHOW_PERMISSIONS_RATIONALE\"/>\n      </intent-filter>\n      <intent-filter>\n        <action android:name=\"androidx.health.ACTION_SHOW_PERMISSIONS_RATIONALE\"/>\n      </intent-filter>\n      <intent-filter>\n        <action android:name=\"androidx.health.ACTION_SHOW_PERMISSIONS_RATIONALE\"/>\n      </intent-filter>\n      <intent-filter>\n        <action android:name=\"androidx.health.ACTION_SHOW_PERMISSIONS_RATIONALE\"/>\n      </intent-filter>\n>>>>>>> cf971f6a5e39723265b900f8f9b09f5074bc4a11\n    </activity>\n\\`\\`\\`\n\n**Status:** ‚úÖ Fixed during analysis\n\n---\n\n## Impact\n\n### Build Failures\n\\`\\`\\`\nError: Failed to parse XML\nandroid.os.ParcelableException: XML parsing error\n\\`\\`\\`\n\nThe app **could not build** due to invalid XML from merge conflicts.\n\n---\n\n### What This Reveals\n\n| Issue | Severity | Description |\n|-------|----------|-------------|\n| No Code Review | üî¥ Critical | Conflicts pushed without review |\n| No CI/CD | üî¥ Critical | No automated build checks |\n| No Testing | üî¥ Critical | Code not tested before push |\n| Poor Git Practices | üü† High | Improper merge resolution |\n| No Quality Gates | üî¥ Critical | No checks before merge |\n\n---\n\n## Root Causes\n\n### 1. **No Pre-commit Hooks**\n\nNo git hooks to prevent committing files with conflict markers.\n\n---\n\n### 2. **No CI/CD Pipeline**\n\nNo automated checks to catch:\n- Build failures\n- Merge conflicts\n- Linting errors\n- Test failures\n\n---\n\n### 3. **No Code Review Process**\n\nCode merged without review, allowing conflicts to slip through.\n\n---\n\n### 4. **No Branch Protection**\n\nNo branch protection rules on main/master branch.\n\n---\n\n## Required Implementation\n\n### 1. **Set Up Pre-commit Hooks**\n\n#### Install Husky:\n\n\\`\\`\\`bash\nnpm install --save-dev husky\nnpx husky install\n\\`\\`\\`\n\n#### Create pre-commit hook:\n\n\\`\\`\\`bash\nnpx husky add .husky/pre-commit \"npm run pre-commit\"\n\\`\\`\\`\n\n#### Add to package.json:\n\n\\`\\`\\`json\n{\n  \"scripts\": {\n    \"pre-commit\": \"npm run lint && npm run check-conflicts\",\n    \"check-conflicts\": \"git diff --check\",\n    \"lint\": \"eslint . --ext .ts,.tsx,.js,.jsx\"\n  }\n}\n\\`\\`\\`\n\n---\n\n### 2. **Set Up Git Hooks to Prevent Conflict Markers**\n\n#### Create: \\`.husky/pre-commit\\`\n\n\\`\\`\\`bash\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\n# Check for merge conflict markers\nif git diff --cached --name-only | xargs grep -l \"^<<<<<<< \\|^=======$\\|^>>>>>>> \" 2>/dev/null; then\n  echo \"‚ùå ERROR: Merge conflict markers found in staged files!\"\n  echo \"Please resolve all conflicts before committing.\"\n  exit 1\nfi\n\n# Run linter\nnpm run lint\n\n# Check TypeScript\nnpm run type-check\n\\`\\`\\`\n\n---\n\n### 3. **Set Up CI/CD Pipeline**\n\n#### Create: \\`.github/workflows/ci.yml\\`\n\n\\`\\`\\`yaml\nname: CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: \\'18\\'\n          cache: \\'npm\\'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Check for merge conflicts\n        run: |\n          if git grep -l \"^<<<<<<< \\|^=======$\\|^>>>>>>> \" -- \\'*.ts\\' \\'*.tsx\\' \\'*.js\\' \\'*.jsx\\' \\'*.xml\\' \\'*.json\\'; then\n            echo \"‚ùå Merge conflict markers found!\"\n            exit 1\n          fi\n      \n      - name: Lint\n        run: npm run lint\n      \n      - name: Type check\n        run: npm run type-check\n      \n      - name: Run tests\n        run: npm test\n      \n      - name: Build Android\n        run: |\n          cd android\n          ./gradlew assembleDebug --no-daemon\n\\`\\`\\`\n\n---\n\n### 4. **Set Up Branch Protection Rules**\n\n#### On GitHub:\n\n1. Go to repository **Settings** ‚Üí **Branches**\n2. Add rule for \\`main\\` branch:\n   - ‚úÖ Require pull request reviews before merging\n   - ‚úÖ Require status checks to pass before merging\n   - ‚úÖ Require branches to be up to date before merging\n   - ‚úÖ Require linear history\n   - ‚úÖ Include administrators\n\n---\n\n### 5. **Set Up Pull Request Template**\n\n#### Create: \\`.github/pull_request_template.md\\`\n\n\\`\\`\\`markdown\n## Description\n<!-- Describe your changes -->\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Checklist\n- [ ] Code builds successfully\n- [ ] No merge conflicts\n- [ ] Linting passes\n- [ ] Type checking passes\n- [ ] Tests added/updated\n- [ ] All tests pass\n- [ ] Tested on iOS\n- [ ] Tested on Android\n- [ ] No hardcoded values added\n- [ ] No console.logs left in code\n- [ ] Updated documentation if needed\n\n## Screenshots (if applicable)\n<!-- Add screenshots -->\n\n## Related Issues\n<!-- Link to related issues -->\n\\`\\`\\`\n\n---\n\n### 6. **Create Git Workflow Documentation**\n\n#### Create: \\`docs/GIT_WORKFLOW.md\\`\n\n\\`\\`\\`markdown\n# Git Workflow\n\n## Branch Strategy\n\n- \\`main\\` - Production-ready code\n- \\`develop\\` - Integration branch\n- \\`feature/*\\` - Feature branches\n- \\`fix/*\\` - Bug fix branches\n- \\`hotfix/*\\` - Emergency fixes\n\n## Workflow\n\n### 1. Create Feature Branch\n\\`\\`\\`bash\ngit checkout develop\ngit pull origin develop\ngit checkout -b feature/my-feature\n\\`\\`\\`\n\n### 2. Make Changes\n\\`\\`\\`bash\n# Make your changes\ngit add .\ngit commit -m \"feat: add new feature\"\n\\`\\`\\`\n\n### 3. Keep Updated\n\\`\\`\\`bash\ngit checkout develop\ngit pull origin develop\ngit checkout feature/my-feature\ngit rebase develop\n\\`\\`\\`\n\n### 4. Push and Create PR\n\\`\\`\\`bash\ngit push origin feature/my-feature\n# Create Pull Request on GitHub\n\\`\\`\\`\n\n### 5. Code Review\n- Wait for CI checks to pass\n- Request review from team\n- Address review comments\n- Get approval\n\n### 6. Merge\n- Squash and merge to develop\n- Delete feature branch\n\n## Resolving Merge Conflicts\n\n### DO:\n‚úÖ Test after resolving conflicts\n‚úÖ Review all changes\n‚úÖ Run linter and type checker\n‚úÖ Build the app\n‚úÖ Test affected features\n\n### DON\\'T:\n‚ùå Commit conflict markers\n‚ùå Push without testing\n‚ùå Force push to main\n‚ùå Skip code review\n\\`\\`\\`\n\n---\n\n## Verification Checklist\n\n- [ ] Husky installed\n- [ ] Pre-commit hooks configured\n- [ ] Commit message linting configured\n- [ ] CI/CD pipeline created\n- [ ] Branch protection rules enabled\n- [ ] PR template created\n- [ ] Git workflow documented\n- [ ] Conflict detection script created\n- [ ] Team trained on workflow\n- [ ] All existing conflicts resolved\n\n---\n\n## Prevention Measures\n\n### 1. **Developer Training**\n\nTrain team on:\n- Proper merge conflict resolution\n- Git workflow\n- Code review process\n- Testing before pushing\n\n---\n\n### 2. **Code Review Checklist**\n\nReviewers must check:\n- [ ] No merge conflict markers\n- [ ] Code builds successfully\n- [ ] Tests pass\n- [ ] No console.logs\n- [ ] No hardcoded values\n- [ ] Proper error handling\n- [ ] Accessibility considered\n\n---\n\n### 3. **Automated Checks**\n\nImplement:\n- Pre-commit: Lint, type check, conflict detection\n- Pre-push: Build, test\n- CI: Full build, test, security scan\n- PR: Code review, approval required\n\n---\n\n## Lessons Learned\n\n1. **Always test before pushing**\n2. **Use pre-commit hooks**\n3. **Implement CI/CD**\n4. **Require code reviews**\n5. **Protect main branch**\n6. **Document workflows**\n7. **Train the team**\n\n---\n\n\n## Priority: üî¥ CRITICAL - PREVENTS FUTURE ISSUES\n\n**Status:** ‚úÖ Conflicts fixed, but prevention measures MUST be implemented immediately.\n`;","map":{"version":3,"names":["gitconflictsContent"],"sources":["/Users/oudaykhaled/Downloads/Open Source/Code Review/dashboard/src/data/content/git-conflicts.js"],"sourcesContent":["export const gitconflictsContent = `\n# üî¥ CRITICAL ISSUE #6: Git Merge Conflicts in Production Files\n\n**Severity:** üî¥ CRITICAL  \n**Score:** 0/10  \n**Status:** ‚úÖ FIXED (But indicates poor practices)\n\n---\n\n## Overview\n\nThe codebase had **unresolved Git merge conflicts** in production files, specifically in \\`AndroidManifest.xml\\`. This is a **critical issue** that indicates:\n- ‚ùå Poor version control practices\n- ‚ùå No code review process\n- ‚ùå No CI/CD checks\n- ‚ùå Code pushed without testing\n- ‚ùå Build failures\n\n---\n\n## Issues Found\n\n### 1. **Unresolved Merge Conflicts in AndroidManifest.xml**\n\n**Location:** \\`android/app/src/main/AndroidManifest.xml\\`\n\n**Found Conflicts:**\n\\`\\`\\`xml\n<<<<<<< HEAD\n  <uses-permission android:name=\"android.permission.health.READ_FLOORS_CLIMBED\"/>\n=======\n>>>>>>> cf971f6a5e39723265b900f8f9b09f5074bc4a11\n  <uses-permission android:name=\"android.permission.health.READ_HYDRATION\"/>\n\n<!-- ... later in file ... -->\n\n<<<<<<< HEAD\n=======\n      <intent-filter>\n        <action android:name=\"androidx.health.ACTION_SHOW_PERMISSIONS_RATIONALE\"/>\n      </intent-filter>\n      <intent-filter>\n        <action android:name=\"androidx.health.ACTION_SHOW_PERMISSIONS_RATIONALE\"/>\n      </intent-filter>\n      <intent-filter>\n        <action android:name=\"androidx.health.ACTION_SHOW_PERMISSIONS_RATIONALE\"/>\n      </intent-filter>\n      <intent-filter>\n        <action android:name=\"androidx.health.ACTION_SHOW_PERMISSIONS_RATIONALE\"/>\n      </intent-filter>\n>>>>>>> cf971f6a5e39723265b900f8f9b09f5074bc4a11\n    </activity>\n\\`\\`\\`\n\n**Status:** ‚úÖ Fixed during analysis\n\n---\n\n## Impact\n\n### Build Failures\n\\`\\`\\`\nError: Failed to parse XML\nandroid.os.ParcelableException: XML parsing error\n\\`\\`\\`\n\nThe app **could not build** due to invalid XML from merge conflicts.\n\n---\n\n### What This Reveals\n\n| Issue | Severity | Description |\n|-------|----------|-------------|\n| No Code Review | üî¥ Critical | Conflicts pushed without review |\n| No CI/CD | üî¥ Critical | No automated build checks |\n| No Testing | üî¥ Critical | Code not tested before push |\n| Poor Git Practices | üü† High | Improper merge resolution |\n| No Quality Gates | üî¥ Critical | No checks before merge |\n\n---\n\n## Root Causes\n\n### 1. **No Pre-commit Hooks**\n\nNo git hooks to prevent committing files with conflict markers.\n\n---\n\n### 2. **No CI/CD Pipeline**\n\nNo automated checks to catch:\n- Build failures\n- Merge conflicts\n- Linting errors\n- Test failures\n\n---\n\n### 3. **No Code Review Process**\n\nCode merged without review, allowing conflicts to slip through.\n\n---\n\n### 4. **No Branch Protection**\n\nNo branch protection rules on main/master branch.\n\n---\n\n## Required Implementation\n\n### 1. **Set Up Pre-commit Hooks**\n\n#### Install Husky:\n\n\\`\\`\\`bash\nnpm install --save-dev husky\nnpx husky install\n\\`\\`\\`\n\n#### Create pre-commit hook:\n\n\\`\\`\\`bash\nnpx husky add .husky/pre-commit \"npm run pre-commit\"\n\\`\\`\\`\n\n#### Add to package.json:\n\n\\`\\`\\`json\n{\n  \"scripts\": {\n    \"pre-commit\": \"npm run lint && npm run check-conflicts\",\n    \"check-conflicts\": \"git diff --check\",\n    \"lint\": \"eslint . --ext .ts,.tsx,.js,.jsx\"\n  }\n}\n\\`\\`\\`\n\n---\n\n### 2. **Set Up Git Hooks to Prevent Conflict Markers**\n\n#### Create: \\`.husky/pre-commit\\`\n\n\\`\\`\\`bash\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\n# Check for merge conflict markers\nif git diff --cached --name-only | xargs grep -l \"^<<<<<<< \\|^=======$\\|^>>>>>>> \" 2>/dev/null; then\n  echo \"‚ùå ERROR: Merge conflict markers found in staged files!\"\n  echo \"Please resolve all conflicts before committing.\"\n  exit 1\nfi\n\n# Run linter\nnpm run lint\n\n# Check TypeScript\nnpm run type-check\n\\`\\`\\`\n\n---\n\n### 3. **Set Up CI/CD Pipeline**\n\n#### Create: \\`.github/workflows/ci.yml\\`\n\n\\`\\`\\`yaml\nname: CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: \\'18\\'\n          cache: \\'npm\\'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Check for merge conflicts\n        run: |\n          if git grep -l \"^<<<<<<< \\|^=======$\\|^>>>>>>> \" -- \\'*.ts\\' \\'*.tsx\\' \\'*.js\\' \\'*.jsx\\' \\'*.xml\\' \\'*.json\\'; then\n            echo \"‚ùå Merge conflict markers found!\"\n            exit 1\n          fi\n      \n      - name: Lint\n        run: npm run lint\n      \n      - name: Type check\n        run: npm run type-check\n      \n      - name: Run tests\n        run: npm test\n      \n      - name: Build Android\n        run: |\n          cd android\n          ./gradlew assembleDebug --no-daemon\n\\`\\`\\`\n\n---\n\n### 4. **Set Up Branch Protection Rules**\n\n#### On GitHub:\n\n1. Go to repository **Settings** ‚Üí **Branches**\n2. Add rule for \\`main\\` branch:\n   - ‚úÖ Require pull request reviews before merging\n   - ‚úÖ Require status checks to pass before merging\n   - ‚úÖ Require branches to be up to date before merging\n   - ‚úÖ Require linear history\n   - ‚úÖ Include administrators\n\n---\n\n### 5. **Set Up Pull Request Template**\n\n#### Create: \\`.github/pull_request_template.md\\`\n\n\\`\\`\\`markdown\n## Description\n<!-- Describe your changes -->\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Checklist\n- [ ] Code builds successfully\n- [ ] No merge conflicts\n- [ ] Linting passes\n- [ ] Type checking passes\n- [ ] Tests added/updated\n- [ ] All tests pass\n- [ ] Tested on iOS\n- [ ] Tested on Android\n- [ ] No hardcoded values added\n- [ ] No console.logs left in code\n- [ ] Updated documentation if needed\n\n## Screenshots (if applicable)\n<!-- Add screenshots -->\n\n## Related Issues\n<!-- Link to related issues -->\n\\`\\`\\`\n\n---\n\n### 6. **Create Git Workflow Documentation**\n\n#### Create: \\`docs/GIT_WORKFLOW.md\\`\n\n\\`\\`\\`markdown\n# Git Workflow\n\n## Branch Strategy\n\n- \\`main\\` - Production-ready code\n- \\`develop\\` - Integration branch\n- \\`feature/*\\` - Feature branches\n- \\`fix/*\\` - Bug fix branches\n- \\`hotfix/*\\` - Emergency fixes\n\n## Workflow\n\n### 1. Create Feature Branch\n\\`\\`\\`bash\ngit checkout develop\ngit pull origin develop\ngit checkout -b feature/my-feature\n\\`\\`\\`\n\n### 2. Make Changes\n\\`\\`\\`bash\n# Make your changes\ngit add .\ngit commit -m \"feat: add new feature\"\n\\`\\`\\`\n\n### 3. Keep Updated\n\\`\\`\\`bash\ngit checkout develop\ngit pull origin develop\ngit checkout feature/my-feature\ngit rebase develop\n\\`\\`\\`\n\n### 4. Push and Create PR\n\\`\\`\\`bash\ngit push origin feature/my-feature\n# Create Pull Request on GitHub\n\\`\\`\\`\n\n### 5. Code Review\n- Wait for CI checks to pass\n- Request review from team\n- Address review comments\n- Get approval\n\n### 6. Merge\n- Squash and merge to develop\n- Delete feature branch\n\n## Resolving Merge Conflicts\n\n### DO:\n‚úÖ Test after resolving conflicts\n‚úÖ Review all changes\n‚úÖ Run linter and type checker\n‚úÖ Build the app\n‚úÖ Test affected features\n\n### DON\\'T:\n‚ùå Commit conflict markers\n‚ùå Push without testing\n‚ùå Force push to main\n‚ùå Skip code review\n\\`\\`\\`\n\n---\n\n## Verification Checklist\n\n- [ ] Husky installed\n- [ ] Pre-commit hooks configured\n- [ ] Commit message linting configured\n- [ ] CI/CD pipeline created\n- [ ] Branch protection rules enabled\n- [ ] PR template created\n- [ ] Git workflow documented\n- [ ] Conflict detection script created\n- [ ] Team trained on workflow\n- [ ] All existing conflicts resolved\n\n---\n\n## Prevention Measures\n\n### 1. **Developer Training**\n\nTrain team on:\n- Proper merge conflict resolution\n- Git workflow\n- Code review process\n- Testing before pushing\n\n---\n\n### 2. **Code Review Checklist**\n\nReviewers must check:\n- [ ] No merge conflict markers\n- [ ] Code builds successfully\n- [ ] Tests pass\n- [ ] No console.logs\n- [ ] No hardcoded values\n- [ ] Proper error handling\n- [ ] Accessibility considered\n\n---\n\n### 3. **Automated Checks**\n\nImplement:\n- Pre-commit: Lint, type check, conflict detection\n- Pre-push: Build, test\n- CI: Full build, test, security scan\n- PR: Code review, approval required\n\n---\n\n## Lessons Learned\n\n1. **Always test before pushing**\n2. **Use pre-commit hooks**\n3. **Implement CI/CD**\n4. **Require code reviews**\n5. **Protect main branch**\n6. **Document workflows**\n7. **Train the team**\n\n---\n\n\n## Priority: üî¥ CRITICAL - PREVENTS FUTURE ISSUES\n\n**Status:** ‚úÖ Conflicts fixed, but prevention measures MUST be implemented immediately.\n`;\n"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAG;AACnignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}