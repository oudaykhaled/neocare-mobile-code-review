{"ast":null,"code":"export const overviewContent=\"\\n# NEOCARE Project Architecture Analysis - Production Assessment\\n\\n**Project Type:** Healthcare Mobile Application (React Native + Expo)  \\n**Analysis Date:** October 6, 2025  \\n**Version:** 1.2.0  \\n**Assessment Type:** Production Readiness Review\\n\\n---\\n\\n## \\u26A0\\uFE0F CRITICAL DISCLAIMER\\n\\n**This codebase has MAJOR production readiness issues including:**\\n- \\uD83D\\uDD34 Unresolved Git merge conflicts in production files\\n- \\uD83D\\uDD34 Hardcoded API keys and sensitive credentials in repository\\n- \\uD83D\\uDD34 Missing error boundaries and crash handling\\n- \\uD83D\\uDD34 No Material Design or established design system\\n- \\uD83D\\uDD34 Extensive hardcoded values and magic numbers\\n\\n**This code is NOT production-ready in its current state.**\\n\\n---\\n\\n## Executive Summary\\n\\n| Overall Score | Production Ready? |\\n|---------------|-------------------|\\n| **4.8/10 (48%)** | \\u274C **NO** |\\n\\n---\\n\\n## \\uD83D\\uDD34 Critical Issues (Detailed Documents)\\n\\nEach critical issue has a dedicated document with detailed analysis, code examples, and implementation guides:\\n\\n1. **[Security Vulnerabilities](./01-CRITICAL-Security-Vulnerabilities.md)** - Exposed API keys, hardcoded credentials (Score: 1/10)\\n2. **[No Error Boundaries](./02-CRITICAL-No-Error-Boundaries.md)** - App crashes completely on errors (Score: 0/10)\\n3. **[Extensive Hardcoding](./03-CRITICAL-Extensive-Hardcoding.md)** - Magic numbers and hardcoded values everywhere (Score: 1/10)\\n4. **[No Material Design System](./04-CRITICAL-No-Material-Design.md)** - No design system, custom components only (Score: 0/10)\\n5. **[Chaotic Styling Approach](./05-CRITICAL-Chaotic-Styling.md)** - Inconsistent styling patterns throughout (Score: 3/10)\\n6. **[Git Merge Conflicts](./06-CRITICAL-Git-Merge-Conflicts.md)** - Unresolved conflicts in production files (Score: 0/10, Fixed)\\n\\n---\\n\\n## Detailed Assessment with Severity Levels\\n\\n| Criteria | Status | Score | Severity | Notes |\\n|----------|--------|-------|----------|-------|\\n| **Architecture & Code Organization** |\\n| File and folder structure | \\u2705 | 7/10 | \\uD83D\\uDFE1 Low | Well-organized but could use feature-based structure |\\n| Component hierarchy | \\u26A0\\uFE0F | 6/10 | \\uD83D\\uDFE1 Low | Deep nesting in booking flow, needs refactoring |\\n| Separation of concerns | \\u274C | 4/10 | \\uD83D\\uDD34 **Critical** | Business logic heavily mixed with UI components |\\n| Custom hooks usage | \\u2705 | 7/10 | \\uD83D\\uDFE1 Low | Good hooks but inconsistent patterns |\\n| Provider pattern | \\u2705 | 8/10 | \\uD83D\\uDFE2 None | Well-implemented Context API |\\n| Navigation architecture | \\u2705 | 8/10 | \\uD83D\\uDFE2 None | Clean Expo Router implementation |\\n| **Design System & UI Consistency** |\\n| Material Design usage | \\u274C | 0/10 | \\uD83D\\uDD34 **Critical** | **NO Material Design system** - Custom components only |\\n| Design system presence | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE0 High | Custom UIKit but inconsistent, no design tokens |\\n| Component library | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE0 High | Basic components exist but lack standardization |\\n| Styling approach | \\u274C | 3/10 | \\uD83D\\uDD34 **Critical** | Chaotic mix of inline styles and StyleSheet |\\n| Theme implementation | \\u26A0\\uFE0F | 6/10 | \\uD83D\\uDFE0 High | Theme exists but poorly integrated |\\n| Color management | \\u26A0\\uFE0F | 6/10 | \\uD83D\\uDFE0 High | Colors.ts exists but not consistently used |\\n| Typography system | \\u274C | 4/10 | \\uD83D\\uDFE0 High | Text component exists but inconsistent usage |\\n| Spacing consistency | \\u274C | 2/10 | \\uD83D\\uDD34 **Critical** | Hardcoded spacing everywhere (8, 12, 14, 16, etc.) |\\n| **Code Quality & Maintainability** |\\n| Hardcoded values | \\u274C | 1/10 | \\uD83D\\uDD34 **Critical** | Extensive hardcoding: \\\"250 mg\\\", \\\"480\\\", URLs, strings |\\n| Magic numbers | \\u274C | 1/10 | \\uD83D\\uDD34 **Critical** | Magic numbers everywhere (8, 12, 14, 100, 480) |\\n| Inline styles | \\u274C | 2/10 | \\uD83D\\uDD34 **Critical** | Heavy inline style usage, poor maintainability |\\n| Constants management | \\u274C | 2/10 | \\uD83D\\uDD34 **Critical** | No centralized constants, values scattered |\\n| Props interfaces | \\u26A0\\uFE0F | 6/10 | \\uD83D\\uDFE1 Low | Types exist but incomplete |\\n| Code duplication | \\u274C | 4/10 | \\uD83D\\uDFE0 High | Repeated patterns (BottomSheet, API calls, validation) |\\n| Import organization | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE1 Low | Inconsistent, some path aliases used |\\n| **TypeScript Implementation** |\\n| Type definitions | \\u26A0\\uFE0F | 6/10 | \\uD83D\\uDFE0 High | Types folder exists but incomplete coverage |\\n| Type safety | \\u274C | 4/10 | \\uD83D\\uDFE0 High | Many `any` types, weak type enforcement |\\n| Enum usage | \\u274C | 1/10 | \\uD83D\\uDD34 **Critical** | **NO enums** - hardcoded strings (\\\"contain\\\", \\\"outline\\\") |\\n| Interface consistency | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE0 High | Inconsistent interface definitions |\\n| Generic types | \\u274C | 3/10 | \\uD83D\\uDFE1 Low | Minimal generic usage |\\n| Props typing | \\u26A0\\uFE0F | 6/10 | \\uD83D\\uDFE1 Low | Most components typed but not comprehensive |\\n| **Security & Configuration** |\\n| Environment variables | \\u274C | 0/10 | \\uD83D\\uDD34 **Critical** | **API keys hardcoded in repo** (GoogleService-Info.plist) |\\n| API configuration | \\u274C | 2/10 | \\uD83D\\uDD34 **Critical** | Multiple commented URLs, no env-based config |\\n| Secrets management | \\u274C | 0/10 | \\uD83D\\uDD34 **Critical** | Google API keys, Firebase config exposed in git |\\n| Config management | \\u274C | 3/10 | \\uD83D\\uDD34 **Critical** | Hardcoded baseURL with commented alternatives |\\n| **Error Handling & Resilience** |\\n| Error boundaries | \\u274C | 0/10 | \\uD83D\\uDD34 **Critical** | **NO error boundaries** - app crashes on errors |\\n| API error handling | \\u274C | 3/10 | \\uD83D\\uDD34 **Critical** | Minimal error handling, no retry logic |\\n| Null safety | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE0 High | Some null checks but inconsistent |\\n| Fallback UI | \\u274C | 2/10 | \\uD83D\\uDD34 **Critical** | No fallback states for failures |\\n| Crash reporting | \\u274C | 0/10 | \\uD83D\\uDD34 **Critical** | No Sentry, Crashlytics, or error tracking |\\n| **State Management** |\\n| Global state | \\u2705 | 7/10 | \\uD83D\\uDFE1 Low | Context API well-used |\\n| State decisions | \\u26A0\\uFE0F | 6/10 | \\uD83D\\uDFE1 Low | Reasonable but could be optimized |\\n| Data caching | \\u274C | 3/10 | \\uD83D\\uDFE0 High | No proper caching strategy |\\n| State normalization | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE1 Low | Some nested structures |\\n| **Performance** |\\n| List optimization | \\u26A0\\uFE0F | 6/10 | \\uD83D\\uDFE1 Low | FlashList used but not everywhere |\\n| Image optimization | \\u274C | 4/10 | \\uD83D\\uDFE0 High | No lazy loading or optimization |\\n| Bundle size | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE1 Low | Large bundle (2432 modules) |\\n| Memoization | \\u274C | 3/10 | \\uD83D\\uDFE0 High | Limited use of useMemo/useCallback |\\n| **Testing & Quality** |\\n| Unit tests | \\u274C | 0/10 | \\uD83D\\uDFE1 Low | **NO tests found** |\\n| Integration tests | \\u274C | 0/10 | \\uD83D\\uDFE1 Low | **NO tests found** |\\n| E2E tests | \\u274C | 0/10 | \\uD83D\\uDFE1 Low | **NO tests found** |\\n| Test coverage | \\u274C | 0/10 | \\uD83D\\uDFE1 Low | 0% coverage |\\n| **Git & Version Control** |\\n| Merge conflicts | \\u274C | 0/10 | \\uD83D\\uDD34 **Critical** | **Unresolved conflicts in AndroidManifest.xml** |\\n| Commit quality | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE1 Low | Cannot assess from snapshot |\\n| Branch strategy | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE1 Low | Cannot assess from snapshot |\\n| **Dependencies** |\\n| Package versions | \\u274C | 4/10 | \\uD83D\\uDFE0 High | 7+ packages outdated |\\n| Security updates | \\u274C | 3/10 | \\uD83D\\uDD34 **Critical** | Outdated packages with potential vulnerabilities |\\n| Dependency management | \\u26A0\\uFE0F | 5/10 | \\uD83D\\uDFE1 Low | npm used, no lock file issues |\\n\\n---\\n\\n## Scoring Summary\\n\\n| Category | Score | Severity |\\n|----------|-------|----------|\\n| Architecture | 6.5/10 | \\uD83D\\uDFE0 High |\\n| Design System | 3.8/10 | \\uD83D\\uDD34 Critical |\\n| Code Quality | 2.3/10 | \\uD83D\\uDD34 Critical |\\n| TypeScript | 4.2/10 | \\uD83D\\uDD34 Critical |\\n| Security | 1.0/10 | \\uD83D\\uDD34 Critical |\\n| Error Handling | 2.0/10 | \\uD83D\\uDD34 Critical |\\n| Testing | 0.0/10 | \\uD83D\\uDFE1 Low |\\n| State Management | 6.2/10 | \\uD83D\\uDFE1 Low |\\n| Performance | 4.5/10 | \\uD83D\\uDFE0 High |\\n| **OVERALL** | **4.8/10** | \\uD83D\\uDD34 **NOT PRODUCTION READY** |\\n\\n---\\n\\n## Production Readiness Checklist\\n\\n### \\uD83D\\uDD34 Critical (Must Fix)\\n- [ ] Remove all hardcoded API keys from repository\\n- [ ] Implement environment variable management\\n- [ ] Add error boundaries throughout app\\n- [ ] Resolve all git merge conflicts\\n- [ ] Implement crash reporting (Sentry/Crashlytics)\\n- [ ] Add comprehensive error handling\\n- [ ] Create constants for all hardcoded values\\n- [ ] Implement enums for string literals\\n- [ ] Add Material Design system (React Native Paper)\\n- [ ] Standardize styling approach\\n\\n### \\uD83D\\uDFE0 High Priority\\n- [ ] Update all outdated dependencies\\n- [ ] Implement design tokens\\n- [ ] Add API retry logic and timeouts\\n- [ ] Refactor code duplication\\n- [ ] Add proper TypeScript strict mode\\n- [ ] Implement proper null safety\\n- [ ] Add loading and error states everywhere\\n- [ ] Optimize bundle size\\n- [ ] Add image optimization\\n- [ ] Implement proper caching strategy\\n\\n### \\uD83D\\uDFE1 Medium Priority\\n- [ ] Refactor deep component nesting\\n- [ ] Standardize import paths\\n- [ ] Add memoization where needed\\n- [ ] Improve state normalization\\n- [ ] Add accessibility features\\n- [ ] Implement code splitting\\n- [ ] Add performance monitoring\\n- [ ] Add unit tests (target: 70%+ coverage)\\n- [ ] Add integration tests for API calls\\n- [ ] Add E2E tests for critical flows\\n\\n---\\n\\n## Conclusion\\n\\n**This codebase is NOT production-ready.** While it has some good architectural foundations (Expo Router, Context API, basic component structure), it suffers from critical issues that make it unsuitable for production deployment, especially for a healthcare application where reliability and security are paramount.\\n\\n\\n**Key Strengths:**\\n- Good folder structure\\n- Expo Router implementation\\n- Context API usage\\n- Basic component library exists\\n\\n**Critical Weaknesses:**\\n- No security (exposed keys)\\n- No error handling\\n- Extensive hardcoding\\n- No design system\\n- Poor code quality\\n- Git merge conflicts\\n- Chaotic styling approach\\n\\n**Recommendation:** Significant refactoring required before production deployment.\\n\";","map":{"version":3,"names":["overviewContent"],"sources":["/Users/oudaykhaled/Downloads/Open Source/Code Review/dashboard/src/data/content/overview.js"],"sourcesContent":["export const overviewContent = `\n# NEOCARE Project Architecture Analysis - Production Assessment\n\n**Project Type:** Healthcare Mobile Application (React Native + Expo)  \n**Analysis Date:** October 6, 2025  \n**Version:** 1.2.0  \n**Assessment Type:** Production Readiness Review\n\n---\n\n## ⚠️ CRITICAL DISCLAIMER\n\n**This codebase has MAJOR production readiness issues including:**\n- 🔴 Unresolved Git merge conflicts in production files\n- 🔴 Hardcoded API keys and sensitive credentials in repository\n- 🔴 Missing error boundaries and crash handling\n- 🔴 No Material Design or established design system\n- 🔴 Extensive hardcoded values and magic numbers\n\n**This code is NOT production-ready in its current state.**\n\n---\n\n## Executive Summary\n\n| Overall Score | Production Ready? |\n|---------------|-------------------|\n| **4.8/10 (48%)** | ❌ **NO** |\n\n---\n\n## 🔴 Critical Issues (Detailed Documents)\n\nEach critical issue has a dedicated document with detailed analysis, code examples, and implementation guides:\n\n1. **[Security Vulnerabilities](./01-CRITICAL-Security-Vulnerabilities.md)** - Exposed API keys, hardcoded credentials (Score: 1/10)\n2. **[No Error Boundaries](./02-CRITICAL-No-Error-Boundaries.md)** - App crashes completely on errors (Score: 0/10)\n3. **[Extensive Hardcoding](./03-CRITICAL-Extensive-Hardcoding.md)** - Magic numbers and hardcoded values everywhere (Score: 1/10)\n4. **[No Material Design System](./04-CRITICAL-No-Material-Design.md)** - No design system, custom components only (Score: 0/10)\n5. **[Chaotic Styling Approach](./05-CRITICAL-Chaotic-Styling.md)** - Inconsistent styling patterns throughout (Score: 3/10)\n6. **[Git Merge Conflicts](./06-CRITICAL-Git-Merge-Conflicts.md)** - Unresolved conflicts in production files (Score: 0/10, Fixed)\n\n---\n\n## Detailed Assessment with Severity Levels\n\n| Criteria | Status | Score | Severity | Notes |\n|----------|--------|-------|----------|-------|\n| **Architecture & Code Organization** |\n| File and folder structure | ✅ | 7/10 | 🟡 Low | Well-organized but could use feature-based structure |\n| Component hierarchy | ⚠️ | 6/10 | 🟡 Low | Deep nesting in booking flow, needs refactoring |\n| Separation of concerns | ❌ | 4/10 | 🔴 **Critical** | Business logic heavily mixed with UI components |\n| Custom hooks usage | ✅ | 7/10 | 🟡 Low | Good hooks but inconsistent patterns |\n| Provider pattern | ✅ | 8/10 | 🟢 None | Well-implemented Context API |\n| Navigation architecture | ✅ | 8/10 | 🟢 None | Clean Expo Router implementation |\n| **Design System & UI Consistency** |\n| Material Design usage | ❌ | 0/10 | 🔴 **Critical** | **NO Material Design system** - Custom components only |\n| Design system presence | ⚠️ | 5/10 | 🟠 High | Custom UIKit but inconsistent, no design tokens |\n| Component library | ⚠️ | 5/10 | 🟠 High | Basic components exist but lack standardization |\n| Styling approach | ❌ | 3/10 | 🔴 **Critical** | Chaotic mix of inline styles and StyleSheet |\n| Theme implementation | ⚠️ | 6/10 | 🟠 High | Theme exists but poorly integrated |\n| Color management | ⚠️ | 6/10 | 🟠 High | Colors.ts exists but not consistently used |\n| Typography system | ❌ | 4/10 | 🟠 High | Text component exists but inconsistent usage |\n| Spacing consistency | ❌ | 2/10 | 🔴 **Critical** | Hardcoded spacing everywhere (8, 12, 14, 16, etc.) |\n| **Code Quality & Maintainability** |\n| Hardcoded values | ❌ | 1/10 | 🔴 **Critical** | Extensive hardcoding: \"250 mg\", \"480\", URLs, strings |\n| Magic numbers | ❌ | 1/10 | 🔴 **Critical** | Magic numbers everywhere (8, 12, 14, 100, 480) |\n| Inline styles | ❌ | 2/10 | 🔴 **Critical** | Heavy inline style usage, poor maintainability |\n| Constants management | ❌ | 2/10 | 🔴 **Critical** | No centralized constants, values scattered |\n| Props interfaces | ⚠️ | 6/10 | 🟡 Low | Types exist but incomplete |\n| Code duplication | ❌ | 4/10 | 🟠 High | Repeated patterns (BottomSheet, API calls, validation) |\n| Import organization | ⚠️ | 5/10 | 🟡 Low | Inconsistent, some path aliases used |\n| **TypeScript Implementation** |\n| Type definitions | ⚠️ | 6/10 | 🟠 High | Types folder exists but incomplete coverage |\n| Type safety | ❌ | 4/10 | 🟠 High | Many \\`any\\` types, weak type enforcement |\n| Enum usage | ❌ | 1/10 | 🔴 **Critical** | **NO enums** - hardcoded strings (\"contain\", \"outline\") |\n| Interface consistency | ⚠️ | 5/10 | 🟠 High | Inconsistent interface definitions |\n| Generic types | ❌ | 3/10 | 🟡 Low | Minimal generic usage |\n| Props typing | ⚠️ | 6/10 | 🟡 Low | Most components typed but not comprehensive |\n| **Security & Configuration** |\n| Environment variables | ❌ | 0/10 | 🔴 **Critical** | **API keys hardcoded in repo** (GoogleService-Info.plist) |\n| API configuration | ❌ | 2/10 | 🔴 **Critical** | Multiple commented URLs, no env-based config |\n| Secrets management | ❌ | 0/10 | 🔴 **Critical** | Google API keys, Firebase config exposed in git |\n| Config management | ❌ | 3/10 | 🔴 **Critical** | Hardcoded baseURL with commented alternatives |\n| **Error Handling & Resilience** |\n| Error boundaries | ❌ | 0/10 | 🔴 **Critical** | **NO error boundaries** - app crashes on errors |\n| API error handling | ❌ | 3/10 | 🔴 **Critical** | Minimal error handling, no retry logic |\n| Null safety | ⚠️ | 5/10 | 🟠 High | Some null checks but inconsistent |\n| Fallback UI | ❌ | 2/10 | 🔴 **Critical** | No fallback states for failures |\n| Crash reporting | ❌ | 0/10 | 🔴 **Critical** | No Sentry, Crashlytics, or error tracking |\n| **State Management** |\n| Global state | ✅ | 7/10 | 🟡 Low | Context API well-used |\n| State decisions | ⚠️ | 6/10 | 🟡 Low | Reasonable but could be optimized |\n| Data caching | ❌ | 3/10 | 🟠 High | No proper caching strategy |\n| State normalization | ⚠️ | 5/10 | 🟡 Low | Some nested structures |\n| **Performance** |\n| List optimization | ⚠️ | 6/10 | 🟡 Low | FlashList used but not everywhere |\n| Image optimization | ❌ | 4/10 | 🟠 High | No lazy loading or optimization |\n| Bundle size | ⚠️ | 5/10 | 🟡 Low | Large bundle (2432 modules) |\n| Memoization | ❌ | 3/10 | 🟠 High | Limited use of useMemo/useCallback |\n| **Testing & Quality** |\n| Unit tests | ❌ | 0/10 | 🟡 Low | **NO tests found** |\n| Integration tests | ❌ | 0/10 | 🟡 Low | **NO tests found** |\n| E2E tests | ❌ | 0/10 | 🟡 Low | **NO tests found** |\n| Test coverage | ❌ | 0/10 | 🟡 Low | 0% coverage |\n| **Git & Version Control** |\n| Merge conflicts | ❌ | 0/10 | 🔴 **Critical** | **Unresolved conflicts in AndroidManifest.xml** |\n| Commit quality | ⚠️ | 5/10 | 🟡 Low | Cannot assess from snapshot |\n| Branch strategy | ⚠️ | 5/10 | 🟡 Low | Cannot assess from snapshot |\n| **Dependencies** |\n| Package versions | ❌ | 4/10 | 🟠 High | 7+ packages outdated |\n| Security updates | ❌ | 3/10 | 🔴 **Critical** | Outdated packages with potential vulnerabilities |\n| Dependency management | ⚠️ | 5/10 | 🟡 Low | npm used, no lock file issues |\n\n---\n\n## Scoring Summary\n\n| Category | Score | Severity |\n|----------|-------|----------|\n| Architecture | 6.5/10 | 🟠 High |\n| Design System | 3.8/10 | 🔴 Critical |\n| Code Quality | 2.3/10 | 🔴 Critical |\n| TypeScript | 4.2/10 | 🔴 Critical |\n| Security | 1.0/10 | 🔴 Critical |\n| Error Handling | 2.0/10 | 🔴 Critical |\n| Testing | 0.0/10 | 🟡 Low |\n| State Management | 6.2/10 | 🟡 Low |\n| Performance | 4.5/10 | 🟠 High |\n| **OVERALL** | **4.8/10** | 🔴 **NOT PRODUCTION READY** |\n\n---\n\n## Production Readiness Checklist\n\n### 🔴 Critical (Must Fix)\n- [ ] Remove all hardcoded API keys from repository\n- [ ] Implement environment variable management\n- [ ] Add error boundaries throughout app\n- [ ] Resolve all git merge conflicts\n- [ ] Implement crash reporting (Sentry/Crashlytics)\n- [ ] Add comprehensive error handling\n- [ ] Create constants for all hardcoded values\n- [ ] Implement enums for string literals\n- [ ] Add Material Design system (React Native Paper)\n- [ ] Standardize styling approach\n\n### 🟠 High Priority\n- [ ] Update all outdated dependencies\n- [ ] Implement design tokens\n- [ ] Add API retry logic and timeouts\n- [ ] Refactor code duplication\n- [ ] Add proper TypeScript strict mode\n- [ ] Implement proper null safety\n- [ ] Add loading and error states everywhere\n- [ ] Optimize bundle size\n- [ ] Add image optimization\n- [ ] Implement proper caching strategy\n\n### 🟡 Medium Priority\n- [ ] Refactor deep component nesting\n- [ ] Standardize import paths\n- [ ] Add memoization where needed\n- [ ] Improve state normalization\n- [ ] Add accessibility features\n- [ ] Implement code splitting\n- [ ] Add performance monitoring\n- [ ] Add unit tests (target: 70%+ coverage)\n- [ ] Add integration tests for API calls\n- [ ] Add E2E tests for critical flows\n\n---\n\n## Conclusion\n\n**This codebase is NOT production-ready.** While it has some good architectural foundations (Expo Router, Context API, basic component structure), it suffers from critical issues that make it unsuitable for production deployment, especially for a healthcare application where reliability and security are paramount.\n\n\n**Key Strengths:**\n- Good folder structure\n- Expo Router implementation\n- Context API usage\n- Basic component library exists\n\n**Critical Weaknesses:**\n- No security (exposed keys)\n- No error handling\n- Extensive hardcoding\n- No design system\n- Poor code quality\n- Git merge conflicts\n- Chaotic styling approach\n\n**Recommendation:** Significant refactoring required before production deployment.\n`;\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,eAAe,y5UAkM3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}