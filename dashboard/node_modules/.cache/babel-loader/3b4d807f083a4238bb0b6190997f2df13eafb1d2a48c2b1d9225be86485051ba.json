{"ast":null,"code":"export const hardcodingContent=\"\\n# \\uD83D\\uDD34 CRITICAL ISSUE #3: Extensive Hardcoding\\n\\n**Severity:** \\uD83D\\uDD34 CRITICAL  \\n**Score:** 1/10  \\n**Status:** \\u274C MUST FIX IMMEDIATELY\\n\\n---\\n\\n## Overview\\n\\nThe codebase contains **extensive hardcoded values** throughout, including:\\n- Magic numbers for spacing, sizing, and timing\\n- Hardcoded strings that should be enums\\n- Hardcoded medicine dosages and cycles\\n- Hardcoded phone numbers and URLs\\n- Inline style values\\n\\nThis makes the code:\\n- \\u274C Unmaintainable\\n- \\u274C Difficult to scale\\n- \\u274C Prone to inconsistencies\\n- \\u274C Hard to theme\\n- \\u274C Impossible to change globally\\n\\n---\\n\\n## Issues Found\\n\\n### 1. **Hardcoded Medicine Values**\\n\\n#### Location: `app/(auth)/medication/addMedicine.tsx`\\n\\n```typescript\\nconst [body, setBody] = useState({\\n  iconType: 1,\\n  title: \\\"\\\",\\n  dose: \\\"250 mg\\\",        // \\u274C Hardcoded default dose\\n  cycle: \\\"480\\\",          // \\u274C Hardcoded default cycle (8 hours in minutes)\\n  totalNumber: \\\"0\\\",\\n  startDate: dayjs().toISOString(),\\n  description: \\\"\\\",\\n  reminder: false,\\n  note: \\\"\\\",\\n  medicalName: \\\"\\\",\\n});\\n\\n// Later in the code:\\n<TextField\\n  placeholder=\\\"250 mg\\\"   // \\u274C Hardcoded placeholder\\n  value={body.dose}\\n/>\\n\\n<TextField\\n  placeholder=\\\"480\\\"      // \\u274C Hardcoded placeholder\\n  value={body.cycle}\\n/>\\n```\\n\\n**Issues:**\\n- Default values hardcoded\\n- No constants file\\n- Values repeated in multiple places\\n- Cannot change globally\\n\\n---\\n\\n### 2. **Magic Numbers for Spacing**\\n\\n#### Location: Multiple files\\n\\n```typescript\\n// src/components/UIKit/Button.tsx\\nconst styles = StyleSheet.create({\\n  contain: {\\n    paddingVertical: 8,      // \\u274C Magic number\\n    paddingHorizontal: 14,   // \\u274C Magic number\\n    gap: 4,                  // \\u274C Magic number\\n  },\\n  normal: {\\n    borderRadius: 12,        // \\u274C Magic number\\n  },\\n  round: {\\n    borderRadius: 100,       // \\u274C Magic number\\n  },\\n});\\n\\n// app/(auth)/booking/unknownPay.tsx\\n<Card\\n  padding={12}              // \\u274C Magic number\\n  margin={12}               // \\u274C Magic number\\n/>\\n\\n<MaterialIcon\\n  size={74}                 // \\u274C Magic number\\n/>\\n\\n// app/(auth)/cycle/range.tsx\\n<Card marginTop={8}>        // \\u274C Magic number\\n\\n{arrayNumberGenerator(10, 38).map(...)}  // \\u274C Magic numbers for cycle range\\n```\\n\\n**Issues:**\\n- No spacing constants\\n- Inconsistent spacing values (8, 12, 14, 16, 24, 74, etc.)\\n- Cannot maintain consistent spacing\\n- Hard to implement design system\\n\\n---\\n\\n### 3. **Hardcoded String Literals (Should be Enums)**\\n\\n#### Location: Multiple files\\n\\n```typescript\\n// Button variants\\nvariant=\\\"contain\\\"     // \\u274C Should be enum\\nvariant=\\\"outline\\\"     // \\u274C Should be enum\\nvariant=\\\"text\\\"        // \\u274C Should be enum\\n\\n// Requirement types\\nelement.type === \\\"fileUpload\\\"  // \\u274C Should be enum\\nelement.type === \\\"input\\\"       // \\u274C Should be enum\\nelement.type === \\\"alert\\\"       // \\u274C Should be enum\\n\\n// Requirement values\\ntype: \\\"file\\\"          // \\u274C Should be enum\\ntype: \\\"string\\\"        // \\u274C Should be enum\\ntype: \\\"alert\\\"         // \\u274C Should be enum\\n```\\n\\n**Issues:**\\n- Typo-prone\\n- No autocomplete\\n- Hard to refactor\\n- No type safety\\n\\n---\\n\\n## Impact Assessment\\n\\n| Category | Impact | Examples |\\n|----------|--------|----------|\\n| Maintainability | \\uD83D\\uDD34 Critical | Cannot change values globally |\\n| Consistency | \\uD83D\\uDD34 Critical | Different spacing values everywhere |\\n| Scalability | \\uD83D\\uDD34 Critical | Hard to add new features |\\n| Type Safety | \\uD83D\\uDFE0 High | String literals prone to typos |\\n| Performance | \\uD83D\\uDFE1 Medium | Inline styles recreated on render |\\n\\n---\\n\\n## Required Implementation\\n\\n### 1. **Create Constants Files**\\n\\n#### Create: `src/constants/Spacing.ts`\\n\\n```typescript\\n/**\\n * Spacing constants following 4px grid system\\n * Use these for consistent spacing throughout the app\\n */\\nexport const Spacing = {\\n  /** 4px - Minimal spacing */\\n  xs: 4,\\n  /** 8px - Small spacing */\\n  sm: 8,\\n  /** 12px - Medium spacing */\\n  md: 12,\\n  /** 16px - Standard spacing */\\n  lg: 16,\\n  /** 24px - Large spacing */\\n  xl: 24,\\n  /** 32px - Extra large spacing */\\n  xxl: 32,\\n  /** 48px - Section spacing */\\n  xxxl: 48,\\n} as const;\\n\\nexport type SpacingKey = keyof typeof Spacing;\\n```\\n\\n---\\n\\n#### Create: `src/constants/Medicine.ts`\\n\\n```typescript\\n/**\\n * Medicine-related constants\\n */\\nexport const MedicineDefaults = {\\n  /** Default dose: 250 mg */\\n  DEFAULT_DOSE: '250 mg',\\n  /** Default cycle: 480 minutes (8 hours) */\\n  DEFAULT_CYCLE: 480,\\n  /** Default cycle in hours */\\n  DEFAULT_CYCLE_HOURS: 8,\\n  /** Minimum cycle in minutes */\\n  MIN_CYCLE: 60,\\n  /** Maximum cycle in minutes */\\n  MAX_CYCLE: 1440, // 24 hours\\n} as const;\\n\\n/**\\n * Common medicine dosages\\n */\\nexport const CommonDosages = [\\n  '50 mg',\\n  '100 mg',\\n  '250 mg',\\n  '500 mg',\\n  '1000 mg',\\n] as const;\\n\\n/**\\n * Common cycle intervals (in minutes)\\n */\\nexport const CommonCycles = {\\n  EVERY_4_HOURS: 240,\\n  EVERY_6_HOURS: 360,\\n  EVERY_8_HOURS: 480,\\n  EVERY_12_HOURS: 720,\\n  ONCE_DAILY: 1440,\\n} as const;\\n```\\n\\n---\\n\\n### 2. **Create Enums**\\n\\n#### Create: `src/types/enums.ts`\\n\\n```typescript\\n/**\\n * Button variants\\n */\\nexport enum ButtonVariant {\\n  CONTAIN = 'contain',\\n  OUTLINE = 'outline',\\n  TEXT = 'text',\\n}\\n\\n/**\\n * Requirement types for services\\n */\\nexport enum RequirementType {\\n  FILE_UPLOAD = 'fileUpload',\\n  INPUT = 'input',\\n  ALERT = 'alert',\\n}\\n\\n/**\\n * Internal requirement value types\\n */\\nexport enum RequirementValueType {\\n  FILE = 'file',\\n  STRING = 'string',\\n  ALERT = 'alert',\\n}\\n\\n/**\\n * Medicine icon types\\n */\\nexport enum MedicineIconType {\\n  PILL = 1,\\n  CAPSULE = 2,\\n  LIQUID = 3,\\n  INJECTION = 4,\\n  INHALER = 5,\\n}\\n\\n/**\\n * Booking status\\n */\\nexport enum BookingStatus {\\n  PENDING = 'pending',\\n  CONFIRMED = 'confirmed',\\n  COMPLETED = 'completed',\\n  CANCELLED = 'cancelled',\\n}\\n```\\n\\n---\\n\\n### 3. **Update Components to Use Constants**\\n\\n#### Update: `src/components/UIKit/Button.tsx`\\n\\n```typescript\\nimport { Spacing, BorderRadius } from '@src/constants';\\nimport { ButtonVariant } from '@src/types/enums';\\n\\ninterface IButton {\\n  variant?: ButtonVariant;  // Use enum instead of string\\n  // ... other props\\n}\\n\\nconst Button = ({ variant = ButtonVariant.CONTAIN, ...props }: IButton) => {\\n  const renderVariant = () => {\\n    switch (variant) {\\n      case ButtonVariant.CONTAIN:\\n        return {\\n          ...styles[variant],\\n          backgroundColor: disabled ? Colors.gray[50] : color || Colors.main,\\n        };\\n      case ButtonVariant.OUTLINE:\\n        return {\\n          ...styles[variant],\\n          borderColor: color || Colors.main,\\n          borderWidth: borderWidth || 1,\\n        };\\n      default:\\n        return styles[variant];\\n    }\\n  };\\n\\n  // ... rest of component\\n};\\n\\nconst styles = StyleSheet.create({\\n  [ButtonVariant.CONTAIN]: {\\n    paddingVertical: Spacing.sm,\\n    paddingHorizontal: Spacing.md,\\n    gap: Spacing.xs,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n  [ButtonVariant.OUTLINE]: {\\n    paddingVertical: Spacing.sm,\\n    paddingHorizontal: Spacing.md,\\n    gap: Spacing.xs,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n  round: {\\n    borderRadius: BorderRadius.round,\\n  },\\n  normal: {\\n    borderRadius: BorderRadius.md,\\n  },\\n});\\n```\\n\\n---\\n\\n#### Update: `app/(auth)/medication/addMedicine.tsx`\\n\\n```typescript\\nimport { MedicineDefaults, CommonCycles } from '@src/constants/Medicine';\\nimport { MedicineIconType } from '@src/types/enums';\\nimport { Spacing } from '@src/constants';\\n\\nconst AddMedicine = () => {\\n  const [body, setBody] = useState({\\n    iconType: MedicineIconType.PILL,\\n    title: \\\"\\\",\\n    dose: MedicineDefaults.DEFAULT_DOSE,\\n    cycle: CommonCycles.EVERY_8_HOURS.toString(),\\n    totalNumber: \\\"0\\\",\\n    startDate: dayjs().toISOString(),\\n    description: \\\"\\\",\\n    reminder: false,\\n    note: \\\"\\\",\\n    medicalName: \\\"\\\",\\n  });\\n\\n  return (\\n    <View style={[styles.page, { paddingBottom: bottom }]}>\\n      <ScrollView nestedScrollEnabled>\\n        <TextField\\n          onChangeText={(e) => setBody((b) => ({ ...b, dose: e }))}\\n          title=\\\"Dose\\\"\\n          placeholder={MedicineDefaults.DEFAULT_DOSE}\\n          value={body.dose}\\n        />\\n        \\n        <TextField\\n          onChangeText={(e) => setBody((b) => ({ ...b, cycle: e }))}\\n          inputMode=\\\"numeric\\\"\\n          keyboardType=\\\"number-pad\\\"\\n          title=\\\"Cycle\\\"\\n          placeholder={CommonCycles.EVERY_8_HOURS.toString()}\\n          value={body.cycle}\\n        />\\n      </ScrollView>\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  page: {\\n    flex: 1,\\n    padding: Spacing.lg,\\n  },\\n});\\n```\\n\\n---\\n\\n## Migration Checklist\\n\\n### Phase 1: Create Constants (Day 1)\\n- [ ] Create Spacing.ts\\n- [ ] Create BorderRadius.ts\\n- [ ] Create IconSizes.ts\\n- [ ] Create Medicine.ts\\n- [ ] Create MenstrualCycle.ts\\n- [ ] Create Contact.ts\\n- [ ] Create enums.ts\\n- [ ] Create DesignTokens.ts\\n- [ ] Create index.ts\\n\\n### Phase 2: Update Core Components (Days 2-3)\\n- [ ] Update Button.tsx\\n- [ ] Update Card.tsx\\n- [ ] Update Text.tsx\\n- [ ] Update TextField.tsx\\n- [ ] Update all UIKit components\\n\\n### Phase 3: Update Feature Components (Days 4-7)\\n- [ ] Update medication screens\\n- [ ] Update booking screens\\n- [ ] Update cycle screens\\n- [ ] Update all other screens\\n\\n### Phase 4: Verification (Day 8)\\n- [ ] Search for magic numbers\\n- [ ] Search for hardcoded strings\\n- [ ] Verify consistency\\n- [ ] Test all screens\\n- [ ] Update documentation\\n\\n---\\n\\n## Benefits After Implementation\\n\\n\\u2705 **Maintainability:** Change values in one place  \\n\\u2705 **Consistency:** Same spacing/sizing everywhere  \\n\\u2705 **Type Safety:** Enums prevent typos  \\n\\u2705 **Scalability:** Easy to add new values  \\n\\u2705 **Documentation:** Constants are self-documenting  \\n\\u2705 **Design System:** Foundation for proper design system  \\n\\n---\\n\\n\\n## Priority: \\uD83D\\uDD34 CRITICAL - BLOCKS PROPER DESIGN SYSTEM\\n\";","map":{"version":3,"names":["hardcodingContent"],"sources":["/Users/oudaykhaled/Downloads/Open Source/Code Review/dashboard/src/data/content/hardcoding.js"],"sourcesContent":["export const hardcodingContent = `\n# 🔴 CRITICAL ISSUE #3: Extensive Hardcoding\n\n**Severity:** 🔴 CRITICAL  \n**Score:** 1/10  \n**Status:** ❌ MUST FIX IMMEDIATELY\n\n---\n\n## Overview\n\nThe codebase contains **extensive hardcoded values** throughout, including:\n- Magic numbers for spacing, sizing, and timing\n- Hardcoded strings that should be enums\n- Hardcoded medicine dosages and cycles\n- Hardcoded phone numbers and URLs\n- Inline style values\n\nThis makes the code:\n- ❌ Unmaintainable\n- ❌ Difficult to scale\n- ❌ Prone to inconsistencies\n- ❌ Hard to theme\n- ❌ Impossible to change globally\n\n---\n\n## Issues Found\n\n### 1. **Hardcoded Medicine Values**\n\n#### Location: \\`app/(auth)/medication/addMedicine.tsx\\`\n\n\\`\\`\\`typescript\nconst [body, setBody] = useState({\n  iconType: 1,\n  title: \"\",\n  dose: \"250 mg\",        // ❌ Hardcoded default dose\n  cycle: \"480\",          // ❌ Hardcoded default cycle (8 hours in minutes)\n  totalNumber: \"0\",\n  startDate: dayjs().toISOString(),\n  description: \"\",\n  reminder: false,\n  note: \"\",\n  medicalName: \"\",\n});\n\n// Later in the code:\n<TextField\n  placeholder=\"250 mg\"   // ❌ Hardcoded placeholder\n  value={body.dose}\n/>\n\n<TextField\n  placeholder=\"480\"      // ❌ Hardcoded placeholder\n  value={body.cycle}\n/>\n\\`\\`\\`\n\n**Issues:**\n- Default values hardcoded\n- No constants file\n- Values repeated in multiple places\n- Cannot change globally\n\n---\n\n### 2. **Magic Numbers for Spacing**\n\n#### Location: Multiple files\n\n\\`\\`\\`typescript\n// src/components/UIKit/Button.tsx\nconst styles = StyleSheet.create({\n  contain: {\n    paddingVertical: 8,      // ❌ Magic number\n    paddingHorizontal: 14,   // ❌ Magic number\n    gap: 4,                  // ❌ Magic number\n  },\n  normal: {\n    borderRadius: 12,        // ❌ Magic number\n  },\n  round: {\n    borderRadius: 100,       // ❌ Magic number\n  },\n});\n\n// app/(auth)/booking/unknownPay.tsx\n<Card\n  padding={12}              // ❌ Magic number\n  margin={12}               // ❌ Magic number\n/>\n\n<MaterialIcon\n  size={74}                 // ❌ Magic number\n/>\n\n// app/(auth)/cycle/range.tsx\n<Card marginTop={8}>        // ❌ Magic number\n\n{arrayNumberGenerator(10, 38).map(...)}  // ❌ Magic numbers for cycle range\n\\`\\`\\`\n\n**Issues:**\n- No spacing constants\n- Inconsistent spacing values (8, 12, 14, 16, 24, 74, etc.)\n- Cannot maintain consistent spacing\n- Hard to implement design system\n\n---\n\n### 3. **Hardcoded String Literals (Should be Enums)**\n\n#### Location: Multiple files\n\n\\`\\`\\`typescript\n// Button variants\nvariant=\"contain\"     // ❌ Should be enum\nvariant=\"outline\"     // ❌ Should be enum\nvariant=\"text\"        // ❌ Should be enum\n\n// Requirement types\nelement.type === \"fileUpload\"  // ❌ Should be enum\nelement.type === \"input\"       // ❌ Should be enum\nelement.type === \"alert\"       // ❌ Should be enum\n\n// Requirement values\ntype: \"file\"          // ❌ Should be enum\ntype: \"string\"        // ❌ Should be enum\ntype: \"alert\"         // ❌ Should be enum\n\\`\\`\\`\n\n**Issues:**\n- Typo-prone\n- No autocomplete\n- Hard to refactor\n- No type safety\n\n---\n\n## Impact Assessment\n\n| Category | Impact | Examples |\n|----------|--------|----------|\n| Maintainability | 🔴 Critical | Cannot change values globally |\n| Consistency | 🔴 Critical | Different spacing values everywhere |\n| Scalability | 🔴 Critical | Hard to add new features |\n| Type Safety | 🟠 High | String literals prone to typos |\n| Performance | 🟡 Medium | Inline styles recreated on render |\n\n---\n\n## Required Implementation\n\n### 1. **Create Constants Files**\n\n#### Create: \\`src/constants/Spacing.ts\\`\n\n\\`\\`\\`typescript\n/**\n * Spacing constants following 4px grid system\n * Use these for consistent spacing throughout the app\n */\nexport const Spacing = {\n  /** 4px - Minimal spacing */\n  xs: 4,\n  /** 8px - Small spacing */\n  sm: 8,\n  /** 12px - Medium spacing */\n  md: 12,\n  /** 16px - Standard spacing */\n  lg: 16,\n  /** 24px - Large spacing */\n  xl: 24,\n  /** 32px - Extra large spacing */\n  xxl: 32,\n  /** 48px - Section spacing */\n  xxxl: 48,\n} as const;\n\nexport type SpacingKey = keyof typeof Spacing;\n\\`\\`\\`\n\n---\n\n#### Create: \\`src/constants/Medicine.ts\\`\n\n\\`\\`\\`typescript\n/**\n * Medicine-related constants\n */\nexport const MedicineDefaults = {\n  /** Default dose: 250 mg */\n  DEFAULT_DOSE: \\'250 mg\\',\n  /** Default cycle: 480 minutes (8 hours) */\n  DEFAULT_CYCLE: 480,\n  /** Default cycle in hours */\n  DEFAULT_CYCLE_HOURS: 8,\n  /** Minimum cycle in minutes */\n  MIN_CYCLE: 60,\n  /** Maximum cycle in minutes */\n  MAX_CYCLE: 1440, // 24 hours\n} as const;\n\n/**\n * Common medicine dosages\n */\nexport const CommonDosages = [\n  \\'50 mg\\',\n  \\'100 mg\\',\n  \\'250 mg\\',\n  \\'500 mg\\',\n  \\'1000 mg\\',\n] as const;\n\n/**\n * Common cycle intervals (in minutes)\n */\nexport const CommonCycles = {\n  EVERY_4_HOURS: 240,\n  EVERY_6_HOURS: 360,\n  EVERY_8_HOURS: 480,\n  EVERY_12_HOURS: 720,\n  ONCE_DAILY: 1440,\n} as const;\n\\`\\`\\`\n\n---\n\n### 2. **Create Enums**\n\n#### Create: \\`src/types/enums.ts\\`\n\n\\`\\`\\`typescript\n/**\n * Button variants\n */\nexport enum ButtonVariant {\n  CONTAIN = \\'contain\\',\n  OUTLINE = \\'outline\\',\n  TEXT = \\'text\\',\n}\n\n/**\n * Requirement types for services\n */\nexport enum RequirementType {\n  FILE_UPLOAD = \\'fileUpload\\',\n  INPUT = \\'input\\',\n  ALERT = \\'alert\\',\n}\n\n/**\n * Internal requirement value types\n */\nexport enum RequirementValueType {\n  FILE = \\'file\\',\n  STRING = \\'string\\',\n  ALERT = \\'alert\\',\n}\n\n/**\n * Medicine icon types\n */\nexport enum MedicineIconType {\n  PILL = 1,\n  CAPSULE = 2,\n  LIQUID = 3,\n  INJECTION = 4,\n  INHALER = 5,\n}\n\n/**\n * Booking status\n */\nexport enum BookingStatus {\n  PENDING = \\'pending\\',\n  CONFIRMED = \\'confirmed\\',\n  COMPLETED = \\'completed\\',\n  CANCELLED = \\'cancelled\\',\n}\n\\`\\`\\`\n\n---\n\n### 3. **Update Components to Use Constants**\n\n#### Update: \\`src/components/UIKit/Button.tsx\\`\n\n\\`\\`\\`typescript\nimport { Spacing, BorderRadius } from \\'@src/constants\\';\nimport { ButtonVariant } from \\'@src/types/enums\\';\n\ninterface IButton {\n  variant?: ButtonVariant;  // Use enum instead of string\n  // ... other props\n}\n\nconst Button = ({ variant = ButtonVariant.CONTAIN, ...props }: IButton) => {\n  const renderVariant = () => {\n    switch (variant) {\n      case ButtonVariant.CONTAIN:\n        return {\n          ...styles[variant],\n          backgroundColor: disabled ? Colors.gray[50] : color || Colors.main,\n        };\n      case ButtonVariant.OUTLINE:\n        return {\n          ...styles[variant],\n          borderColor: color || Colors.main,\n          borderWidth: borderWidth || 1,\n        };\n      default:\n        return styles[variant];\n    }\n  };\n\n  // ... rest of component\n};\n\nconst styles = StyleSheet.create({\n  [ButtonVariant.CONTAIN]: {\n    paddingVertical: Spacing.sm,\n    paddingHorizontal: Spacing.md,\n    gap: Spacing.xs,\n    alignItems: \\'center\\',\n    justifyContent: \\'center\\',\n  },\n  [ButtonVariant.OUTLINE]: {\n    paddingVertical: Spacing.sm,\n    paddingHorizontal: Spacing.md,\n    gap: Spacing.xs,\n    alignItems: \\'center\\',\n    justifyContent: \\'center\\',\n  },\n  round: {\n    borderRadius: BorderRadius.round,\n  },\n  normal: {\n    borderRadius: BorderRadius.md,\n  },\n});\n\\`\\`\\`\n\n---\n\n#### Update: \\`app/(auth)/medication/addMedicine.tsx\\`\n\n\\`\\`\\`typescript\nimport { MedicineDefaults, CommonCycles } from \\'@src/constants/Medicine\\';\nimport { MedicineIconType } from \\'@src/types/enums\\';\nimport { Spacing } from \\'@src/constants\\';\n\nconst AddMedicine = () => {\n  const [body, setBody] = useState({\n    iconType: MedicineIconType.PILL,\n    title: \"\",\n    dose: MedicineDefaults.DEFAULT_DOSE,\n    cycle: CommonCycles.EVERY_8_HOURS.toString(),\n    totalNumber: \"0\",\n    startDate: dayjs().toISOString(),\n    description: \"\",\n    reminder: false,\n    note: \"\",\n    medicalName: \"\",\n  });\n\n  return (\n    <View style={[styles.page, { paddingBottom: bottom }]}>\n      <ScrollView nestedScrollEnabled>\n        <TextField\n          onChangeText={(e) => setBody((b) => ({ ...b, dose: e }))}\n          title=\"Dose\"\n          placeholder={MedicineDefaults.DEFAULT_DOSE}\n          value={body.dose}\n        />\n        \n        <TextField\n          onChangeText={(e) => setBody((b) => ({ ...b, cycle: e }))}\n          inputMode=\"numeric\"\n          keyboardType=\"number-pad\"\n          title=\"Cycle\"\n          placeholder={CommonCycles.EVERY_8_HOURS.toString()}\n          value={body.cycle}\n        />\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  page: {\n    flex: 1,\n    padding: Spacing.lg,\n  },\n});\n\\`\\`\\`\n\n---\n\n## Migration Checklist\n\n### Phase 1: Create Constants (Day 1)\n- [ ] Create Spacing.ts\n- [ ] Create BorderRadius.ts\n- [ ] Create IconSizes.ts\n- [ ] Create Medicine.ts\n- [ ] Create MenstrualCycle.ts\n- [ ] Create Contact.ts\n- [ ] Create enums.ts\n- [ ] Create DesignTokens.ts\n- [ ] Create index.ts\n\n### Phase 2: Update Core Components (Days 2-3)\n- [ ] Update Button.tsx\n- [ ] Update Card.tsx\n- [ ] Update Text.tsx\n- [ ] Update TextField.tsx\n- [ ] Update all UIKit components\n\n### Phase 3: Update Feature Components (Days 4-7)\n- [ ] Update medication screens\n- [ ] Update booking screens\n- [ ] Update cycle screens\n- [ ] Update all other screens\n\n### Phase 4: Verification (Day 8)\n- [ ] Search for magic numbers\n- [ ] Search for hardcoded strings\n- [ ] Verify consistency\n- [ ] Test all screens\n- [ ] Update documentation\n\n---\n\n## Benefits After Implementation\n\n✅ **Maintainability:** Change values in one place  \n✅ **Consistency:** Same spacing/sizing everywhere  \n✅ **Type Safety:** Enums prevent typos  \n✅ **Scalability:** Easy to add new values  \n✅ **Documentation:** Constants are self-documenting  \n✅ **Design System:** Foundation for proper design system  \n\n---\n\n\n## Priority: 🔴 CRITICAL - BLOCKS PROPER DESIGN SYSTEM\n`;\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,iBAAiB,2iUAgc7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}