{"ast":null,"code":"export const errorboundariesContent = `\n# üî¥ CRITICAL ISSUE #2: No Error Boundaries\n\n**Severity:** üî¥ CRITICAL  \n**Score:** 0/10  \n**Status:** ‚ùå MUST FIX IMMEDIATELY\n\n---\n\n## Overview\n\nThe application has **NO error boundaries** implemented. This means any unhandled JavaScript error will crash the entire app, resulting in a blank white screen for users. This is unacceptable for production, especially for a healthcare application.\n\n---\n\n## Current State\n\n### What Happens Now:\n1. ‚ùå Any component error crashes the entire app\n2. ‚ùå Users see a blank white screen\n3. ‚ùå No error recovery mechanism\n4. ‚ùå No error logging or reporting\n5. ‚ùå No user-friendly error messages\n6. ‚ùå App must be force-closed and restarted\n\n### Evidence from Logs:\n\\`\\`\\`\nError: No Activity found to handle Intent { act=androidx.health.action.REQUEST_PERMISSIONS }\n\\`\\`\\`\nThis error crashed the entire app with no recovery option.\n\n---\n\n## Impact Assessment\n\n| Impact Category | Severity | Description |\n|----------------|----------|-------------|\n| User Experience | üî¥ Critical | App crashes = lost users |\n| Data Loss | üî¥ Critical | Unsaved data lost on crash |\n| Reputation | üî¥ Critical | Poor app store ratings |\n| Support Burden | üü† High | Increased support tickets |\n| Debugging | üü† High | No error tracking |\n\n---\n\n## Issues Found\n\n### 1. **No Root-Level Error Boundary**\n\n**Location:** \\`app/_layout.tsx\\`\n\n**Current Code:**\n\\`\\`\\`typescript\nexport default function RootLayout() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <BookingProvider>\n          <LanguageProvider>\n            <CycleProvider>\n              <PermissionProvider>\n                <DeepLinkProvider>\n                  <RootLayoutNav />\n                </DeepLinkProvider>\n              </PermissionProvider>\n            </CycleProvider>\n          </LanguageProvider>\n        </BookingProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n\\`\\`\\`\n\n**Issue:** No error boundary wrapping the app. Any error in any provider or component crashes everything.\n\n---\n\n### 2. **No Error Handling in API Calls**\n\n**Location:** \\`src/helpers/apiHelper.ts\\`\n\n**Current Code:**\n\\`\\`\\`typescript\nexport const getApi = async (url: string, headers?: any, rest?: IRest[]) => {\n  return axios.get(config.baseURL + url, { headers });\n  // No error handling, no timeout, no retry\n};\n\\`\\`\\`\n\n**Issues:**\n- ‚ùå No try-catch blocks\n- ‚ùå No timeout configuration\n- ‚ùå No retry logic\n- ‚ùå No error transformation\n- ‚ùå Errors propagate uncaught\n\n---\n\n## Required Implementation\n\n### 1. **Create Error Boundary Component**\n\n**Create:** \\`src/components/ErrorBoundary.tsx\\`\n\n\\`\\`\\`typescript\nimport React, { Component, ErrorInfo, ReactNode } from \\'react\\';\nimport { View, Text, StyleSheet, TouchableOpacity } from \\'react-native\\';\nimport * as Updates from \\'expo-updates\\';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return {\n      hasError: true,\n      error,\n      errorInfo: null,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log to error reporting service (Sentry, Crashlytics, etc.)\n    console.error(\\'Error caught by boundary:\\', error, errorInfo);\n    \n    // TODO: Send to error tracking service\n    // Sentry.captureException(error, { extra: errorInfo });\n    \n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  handleRestart = async () => {\n    try {\n      await Updates.reloadAsync();\n    } catch (error) {\n      // If reload fails, just reset state\n      this.setState({\n        hasError: false,\n        error: null,\n        errorInfo: null,\n      });\n    }\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <View style={styles.container}>\n          <View style={styles.content}>\n            <Text style={styles.emoji}>üòî</Text>\n            <Text style={styles.title}>Oops! Something went wrong</Text>\n            <Text style={styles.message}>\n              We\\'re sorry for the inconvenience. The app encountered an unexpected error.\n            </Text>\n            \n            <View style={styles.buttonContainer}>\n              <TouchableOpacity\n                style={[styles.button, styles.primaryButton]}\n                onPress={this.handleRestart}\n              >\n                <Text style={styles.buttonText}>Restart App</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \\'#fff\\',\n    justifyContent: \\'center\\',\n    alignItems: \\'center\\',\n    padding: 20,\n  },\n  content: {\n    alignItems: \\'center\\',\n    maxWidth: 400,\n  },\n  emoji: {\n    fontSize: 64,\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \\'bold\\',\n    marginBottom: 12,\n    textAlign: \\'center\\',\n  },\n  message: {\n    fontSize: 16,\n    color: \\'#666\\',\n    textAlign: \\'center\\',\n    marginBottom: 24,\n    lineHeight: 24,\n  },\n  buttonContainer: {\n    width: \\'100%\\',\n    gap: 12,\n  },\n  button: {\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \\'center\\',\n  },\n  primaryButton: {\n    backgroundColor: \\'#7C3A3D\\',\n  },\n  buttonText: {\n    fontSize: 16,\n    fontWeight: \\'600\\',\n    color: \\'#fff\\',\n  },\n});\n\nexport default ErrorBoundary;\n\\`\\`\\`\n\n---\n\n### 2. **Wrap App with Error Boundary**\n\n**Update:** \\`app/_layout.tsx\\`\n\n\\`\\`\\`typescript\nimport ErrorBoundary from \\'@src/components/ErrorBoundary\\';\n\nexport default function RootLayout() {\n  return (\n    <ErrorBoundary>\n      <ThemeProvider>\n        <AuthProvider>\n          <BookingProvider>\n            <LanguageProvider>\n              <CycleProvider>\n                <PermissionProvider>\n                  <DeepLinkProvider>\n                    <RootLayoutNav />\n                  </DeepLinkProvider>\n                </PermissionProvider>\n              </CycleProvider>\n            </LanguageProvider>\n          </BookingProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </ErrorBoundary>\n  );\n}\n\\`\\`\\`\n\n---\n\n### 3. **Improve API Error Handling**\n\n**Update:** \\`src/helpers/apiHelper.ts\\`\n\n\\`\\`\\`typescript\nimport axios, { AxiosError } from \\'axios\\';\nimport { config } from \\'@src/config\\';\n\nclass ApiError extends Error {\n  constructor(\n    message: string,\n    public statusCode?: number,\n    public originalError?: any\n  ) {\n    super(message);\n    this.name = \\'ApiError\\';\n  }\n}\n\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const getApi = async (\n  url: string,\n  headers?: any,\n  rest?: IRest[],\n  retries = 3\n) => {\n  try {\n    const response = await axios.get(config.baseURL + url, {\n      headers,\n      timeout: 10000, // 10 second timeout\n    });\n    return response;\n  } catch (error) {\n    const axiosError = error as AxiosError;\n    \n    // Retry on 5xx errors\n    if (retries > 0 && axiosError.response?.status >= 500) {\n      await delay(1000);\n      return getApi(url, headers, rest, retries - 1);\n    }\n    \n    // Transform error\n    throw new ApiError(\n      axiosError.message || \\'Network request failed\\',\n      axiosError.response?.status,\n      axiosError\n    );\n  }\n};\n\\`\\`\\`\n\n---\n\n## Verification Checklist\n\n- [ ] ErrorBoundary component created\n- [ ] Root app wrapped with ErrorBoundary\n- [ ] Critical sections have error boundaries\n- [ ] API helper has error handling\n- [ ] API helper has retry logic\n- [ ] API helper has timeout configuration\n- [ ] ErrorMessage component created\n- [ ] All async operations have try-catch\n- [ ] User-friendly error messages implemented\n- [ ] Error logging configured\n- [ ] Tested with intentional errors\n- [ ] Tested network failures\n- [ ] Tested timeout scenarios\n\n---\n\n## Testing\n\n### Test Scenarios:\n\n1. **Component Error:**\n   \\`\\`\\`typescript\n   // Temporarily add to test\n   throw new Error(\\'Test error\\');\n   \\`\\`\\`\n\n2. **Network Error:**\n   - Turn off internet\n   - Try API calls\n   - Verify error handling\n\n3. **Timeout:**\n   - Slow network simulation\n   - Verify timeout works\n\n---\n\n\n## Priority: üî¥ CRITICAL - MUST FIX BEFORE PRODUCTION\n`;","map":{"version":3,"names":["errorboundariesContent"],"sources":["/Users/oudaykhaled/Downloads/Open Source/Code Review/dashboard/src/data/content/error-boundaries.js"],"sourcesContent":["export const errorboundariesContent = `\n# üî¥ CRITICAL ISSUE #2: No Error Boundaries\n\n**Severity:** üî¥ CRITICAL  \n**Score:** 0/10  \n**Status:** ‚ùå MUST FIX IMMEDIATELY\n\n---\n\n## Overview\n\nThe application has **NO error boundaries** implemented. This means any unhandled JavaScript error will crash the entire app, resulting in a blank white screen for users. This is unacceptable for production, especially for a healthcare application.\n\n---\n\n## Current State\n\n### What Happens Now:\n1. ‚ùå Any component error crashes the entire app\n2. ‚ùå Users see a blank white screen\n3. ‚ùå No error recovery mechanism\n4. ‚ùå No error logging or reporting\n5. ‚ùå No user-friendly error messages\n6. ‚ùå App must be force-closed and restarted\n\n### Evidence from Logs:\n\\`\\`\\`\nError: No Activity found to handle Intent { act=androidx.health.action.REQUEST_PERMISSIONS }\n\\`\\`\\`\nThis error crashed the entire app with no recovery option.\n\n---\n\n## Impact Assessment\n\n| Impact Category | Severity | Description |\n|----------------|----------|-------------|\n| User Experience | üî¥ Critical | App crashes = lost users |\n| Data Loss | üî¥ Critical | Unsaved data lost on crash |\n| Reputation | üî¥ Critical | Poor app store ratings |\n| Support Burden | üü† High | Increased support tickets |\n| Debugging | üü† High | No error tracking |\n\n---\n\n## Issues Found\n\n### 1. **No Root-Level Error Boundary**\n\n**Location:** \\`app/_layout.tsx\\`\n\n**Current Code:**\n\\`\\`\\`typescript\nexport default function RootLayout() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <BookingProvider>\n          <LanguageProvider>\n            <CycleProvider>\n              <PermissionProvider>\n                <DeepLinkProvider>\n                  <RootLayoutNav />\n                </DeepLinkProvider>\n              </PermissionProvider>\n            </CycleProvider>\n          </LanguageProvider>\n        </BookingProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n\\`\\`\\`\n\n**Issue:** No error boundary wrapping the app. Any error in any provider or component crashes everything.\n\n---\n\n### 2. **No Error Handling in API Calls**\n\n**Location:** \\`src/helpers/apiHelper.ts\\`\n\n**Current Code:**\n\\`\\`\\`typescript\nexport const getApi = async (url: string, headers?: any, rest?: IRest[]) => {\n  return axios.get(config.baseURL + url, { headers });\n  // No error handling, no timeout, no retry\n};\n\\`\\`\\`\n\n**Issues:**\n- ‚ùå No try-catch blocks\n- ‚ùå No timeout configuration\n- ‚ùå No retry logic\n- ‚ùå No error transformation\n- ‚ùå Errors propagate uncaught\n\n---\n\n## Required Implementation\n\n### 1. **Create Error Boundary Component**\n\n**Create:** \\`src/components/ErrorBoundary.tsx\\`\n\n\\`\\`\\`typescript\nimport React, { Component, ErrorInfo, ReactNode } from \\'react\\';\nimport { View, Text, StyleSheet, TouchableOpacity } from \\'react-native\\';\nimport * as Updates from \\'expo-updates\\';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return {\n      hasError: true,\n      error,\n      errorInfo: null,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log to error reporting service (Sentry, Crashlytics, etc.)\n    console.error(\\'Error caught by boundary:\\', error, errorInfo);\n    \n    // TODO: Send to error tracking service\n    // Sentry.captureException(error, { extra: errorInfo });\n    \n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  handleRestart = async () => {\n    try {\n      await Updates.reloadAsync();\n    } catch (error) {\n      // If reload fails, just reset state\n      this.setState({\n        hasError: false,\n        error: null,\n        errorInfo: null,\n      });\n    }\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <View style={styles.container}>\n          <View style={styles.content}>\n            <Text style={styles.emoji}>üòî</Text>\n            <Text style={styles.title}>Oops! Something went wrong</Text>\n            <Text style={styles.message}>\n              We\\'re sorry for the inconvenience. The app encountered an unexpected error.\n            </Text>\n            \n            <View style={styles.buttonContainer}>\n              <TouchableOpacity\n                style={[styles.button, styles.primaryButton]}\n                onPress={this.handleRestart}\n              >\n                <Text style={styles.buttonText}>Restart App</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \\'#fff\\',\n    justifyContent: \\'center\\',\n    alignItems: \\'center\\',\n    padding: 20,\n  },\n  content: {\n    alignItems: \\'center\\',\n    maxWidth: 400,\n  },\n  emoji: {\n    fontSize: 64,\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \\'bold\\',\n    marginBottom: 12,\n    textAlign: \\'center\\',\n  },\n  message: {\n    fontSize: 16,\n    color: \\'#666\\',\n    textAlign: \\'center\\',\n    marginBottom: 24,\n    lineHeight: 24,\n  },\n  buttonContainer: {\n    width: \\'100%\\',\n    gap: 12,\n  },\n  button: {\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \\'center\\',\n  },\n  primaryButton: {\n    backgroundColor: \\'#7C3A3D\\',\n  },\n  buttonText: {\n    fontSize: 16,\n    fontWeight: \\'600\\',\n    color: \\'#fff\\',\n  },\n});\n\nexport default ErrorBoundary;\n\\`\\`\\`\n\n---\n\n### 2. **Wrap App with Error Boundary**\n\n**Update:** \\`app/_layout.tsx\\`\n\n\\`\\`\\`typescript\nimport ErrorBoundary from \\'@src/components/ErrorBoundary\\';\n\nexport default function RootLayout() {\n  return (\n    <ErrorBoundary>\n      <ThemeProvider>\n        <AuthProvider>\n          <BookingProvider>\n            <LanguageProvider>\n              <CycleProvider>\n                <PermissionProvider>\n                  <DeepLinkProvider>\n                    <RootLayoutNav />\n                  </DeepLinkProvider>\n                </PermissionProvider>\n              </CycleProvider>\n            </LanguageProvider>\n          </BookingProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </ErrorBoundary>\n  );\n}\n\\`\\`\\`\n\n---\n\n### 3. **Improve API Error Handling**\n\n**Update:** \\`src/helpers/apiHelper.ts\\`\n\n\\`\\`\\`typescript\nimport axios, { AxiosError } from \\'axios\\';\nimport { config } from \\'@src/config\\';\n\nclass ApiError extends Error {\n  constructor(\n    message: string,\n    public statusCode?: number,\n    public originalError?: any\n  ) {\n    super(message);\n    this.name = \\'ApiError\\';\n  }\n}\n\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const getApi = async (\n  url: string,\n  headers?: any,\n  rest?: IRest[],\n  retries = 3\n) => {\n  try {\n    const response = await axios.get(config.baseURL + url, {\n      headers,\n      timeout: 10000, // 10 second timeout\n    });\n    return response;\n  } catch (error) {\n    const axiosError = error as AxiosError;\n    \n    // Retry on 5xx errors\n    if (retries > 0 && axiosError.response?.status >= 500) {\n      await delay(1000);\n      return getApi(url, headers, rest, retries - 1);\n    }\n    \n    // Transform error\n    throw new ApiError(\n      axiosError.message || \\'Network request failed\\',\n      axiosError.response?.status,\n      axiosError\n    );\n  }\n};\n\\`\\`\\`\n\n---\n\n## Verification Checklist\n\n- [ ] ErrorBoundary component created\n- [ ] Root app wrapped with ErrorBoundary\n- [ ] Critical sections have error boundaries\n- [ ] API helper has error handling\n- [ ] API helper has retry logic\n- [ ] API helper has timeout configuration\n- [ ] ErrorMessage component created\n- [ ] All async operations have try-catch\n- [ ] User-friendly error messages implemented\n- [ ] Error logging configured\n- [ ] Tested with intentional errors\n- [ ] Tested network failures\n- [ ] Tested timeout scenarios\n\n---\n\n## Testing\n\n### Test Scenarios:\n\n1. **Component Error:**\n   \\`\\`\\`typescript\n   // Temporarily add to test\n   throw new Error(\\'Test error\\');\n   \\`\\`\\`\n\n2. **Network Error:**\n   - Turn off internet\n   - Try API calls\n   - Verify error handling\n\n3. **Timeout:**\n   - Slow network simulation\n   - Verify timeout works\n\n---\n\n\n## Priority: üî¥ CRITICAL - MUST FIX BEFORE PRODUCTION\n`;\n"],"mappings":"AAAA,OAAO,MAAMA,sBAAsB,GAAG;AACtignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}